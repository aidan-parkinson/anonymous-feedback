{"version":3,"sources":["components/affective-response/star-rating.js","components/form/form.js","App.js","serviceWorker.js","index.js"],"names":["StarRating","props","hoverHandler","ev","stars","target","parentElement","getElementsByClassName","hoverValue","dataset","value","Array","from","forEach","star","style","color","setRating","refs","rating","state","currentRating","starClickHandler","setState","onClick","this","className","ref","data-rating","onMouseOut","numberOfStars","keys","map","n","key","data-value","onMouseOver","Component","options","clientId","macaddress","client","mqtt","connect","console","log","connected","on","Form","handleChange","name","broadcastFeedback","publish","likert_score","description","window","location","reload","id","onChange","placeholder","React","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb96ce9c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './star-rating.css';\n\nclass StarRating extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentRating: this.props.currentRating\n    };\n  }\n\n  componentDidMount() {\n    this.setRating();\n  }\n\n  hoverHandler = ev => {\n    const stars = ev.target.parentElement.getElementsByClassName('star');\n    const hoverValue = ev.target.dataset.value;\n    Array.from(stars).forEach(star => {\n      star.style.color = hoverValue >= star.dataset.value ? `#C1F0FF` : 'gray';\n    });\n  };\n\n  setRating = ev => {\n    const stars = this.refs.rating.getElementsByClassName('star');\n    Array.from(stars).forEach(star => {\n      star.style.color =\n        this.state.currentRating >= star.dataset.value ? `#C1F0FF` : 'gray';\n    });\n  };\n\n  starClickHandler = ev => {\n    let rating = ev.target.dataset.value;\n    this.setState({ currentRating: rating }); // set state so the rating stays highlighted\n    if(this.props.onClick){\n      this.props.onClick(rating); // emit the event up to the parent\n    }\n  };\n\n  render() {\n    return (\n      <div\n        className=\"rating\"\n        ref=\"rating\"\n        data-rating={this.state.currentRating}\n        onMouseOut={this.setRating}\n      >\n        {[...Array(+this.props.numberOfStars).keys()].map(n => {\n          return (\n            <span\n              className=\"star\"\n              key={n+1}\n              data-value={n+1}\n              onMouseOver={this.hoverHandler}\n              onClick={this.starClickHandler}\n            >\n              &#9733;\n            </span>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default StarRating;\n","import React from 'react';\n\nimport './form.css';\nimport StarRating from '../affective-response/star-rating';\nimport mqtt from 'mqtt';\n\nimport macaddress from 'macaddress';\n//import * as fs from 'fs';\n\n//var caFile = fs.readFileSync('/etc/ssl/certs/learning-iot-ca.crt');\n\nvar options = {\n    clientId: macaddress,\n    // port: 8883,\n    // host: '35.176.252.212',\n    // key: KEY,\n    //ca: caFile,\n    //rejectUnauthorized: false,\n    // The CA list will be used to determine if server is authorized\n    // protocol: 'mqtts'\n  }\n\nvar client = mqtt.connect(\"ws://wss.aidanparkinson.xyz:9001\", options);\nconsole.log(\"connected flag  \" + client.connected);\n\nclient.on(\"connect\",function(){\nconsole.log(\"connected  \"+ client.connected);\n})\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rating: null,\n      description: null,\n    };\n  }\n\n  handleChange = ev => {\n    this.setState({\n      [ev.target.name]: ev.target.value\n    });\n  };\n\n  setRating = rating => {\n    this.setState({ rating: rating });\n  };\n\n  broadcastFeedback = () => {\n    client.publish(`anonymous-feedback/${macaddress}/json`, {likert_score: this.state.rating, description: this.state.description});\n    this.setState({ rating: null, description: null});\n    window.location.reload(false);\n  };\n\n  render() {\n   return (\n      <div>\n        <div className=\"form-input\">\n          <div className=\"form-input-rating\">\n            <StarRating\n              numberOfStars=\"5\"\n              currentRating={null}\n              onClick={this.setRating}\n            />\n          </div>\n          <div className=\"actions\">\n            <button onClick={this.broadcastFeedback}>\n              Submit\n            </button>\n          </div>\n          <textarea\n            name=\"description\"\n            id=\"description\"\n            onChange={this.handleChange}\n            placeholder=\"A description of your experience...\"\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form\n","import React from 'react';\nimport './App.css';\nimport Form from './components/form/form'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"main-heading\">\n          <div className=\"project\">\n            Learning IoT\n          </div>\n          <div className=\"application\">\n            anonymous-feedback\n          </div>\n        </div>\n        <div className=\"question\">\n          An impression:\n        </div>\n        <Form/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}